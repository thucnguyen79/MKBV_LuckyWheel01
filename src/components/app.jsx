import React, { useState, useEffect } from "react";
import { Route } from "react-router-dom";
import { App, ZMPRouter, AnimationRoutes, SnackbarProvider } from "zmp-ui";
import { RecoilRoot } from "recoil";
import HomePage from "../pages";
import About from "../pages/about";
import Form from "../pages/form";
import User from "../pages/user";
import Wheel from "../Wheel";
import QRCode from "./QRCode";

const MyApp = () => {
  const [isFollowingOA, setIsFollowingOA] = useState(null);

  useEffect(() => {
    console.log("üü¢ ƒêang ki·ªÉm tra m√¥i tr∆∞·ªùng...");
    console.log("window:", window);
    console.log("window.zmp:", window.zmp);

    // Mock window.zmp n·∫øu kh√¥ng t·ªìn t·∫°i
    if (typeof window.zmp === "undefined") {
      console.warn("‚ö†Ô∏è M√¥i tr∆∞·ªùng kh√¥ng ph·∫£i Zalo, ƒëang mock window.zmp...");
      window.zmp = {
        requestFollowOAStatus: ({ success, fail }) => {
          const mockResult = true; // Gi·∫£ l·∫≠p: false ch∆∞a follow OA, true ƒë√£ follow OA
          console.log("üü° Mock: Gi·∫£ l·∫≠p tr·∫°ng th√°i quan t√¢m OA:", mockResult);
          success({ result: mockResult }); // G·ªçi success v·ªõi gi√° tr·ªã mock
        },
      };
    }

    // G·ªçi API getUserInfo test
    // console.log("üü¢ G·ªçi API getUserInfo...");
    // window.zmp.getUserInfo({
    //   success: (res) => {
    //     console.log("‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng:", res);
    //   },
    //   fail: (err) => {
    //     console.error("‚ùå L·ªói getUserInfo:", err);
    //   },
    // });

    // G·ªçi API getAppInfo test
    // console.log("üü¢ G·ªçi API getAppInfo...");
    // window.zmp.getAppInfo({
    //   success: (res) => {
    //     console.log("‚úÖ Th√¥ng tin ·ª©ng d·ª•ng:", res);
    //   },
    //   fail: (err) => {
    //     console.error("‚ùå L·ªói getAppInfo:", err);
    //   },
    // });

    // Ki·ªÉm tra tr·∫°ng th√°i quan t√¢m OA
    console.log("üü¢ Ki·ªÉm tra tr·∫°ng th√°i quan t√¢m OA...");
    window.zmp.requestFollowOAStatus({
      success: (res) => {
        console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra OA:", res.result);
        setIsFollowingOA(res.result); // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      },
      fail: (err) => {
        console.error("‚ùå L·ªói ki·ªÉm tra OA:", err);
        setIsFollowingOA(false); // M·∫∑c ƒë·ªãnh l√† false n·∫øu l·ªói
      },
    });
  }, []); // Dependency array r·ªóng ƒë·ªÉ ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount

  if (isFollowingOA === null) {
    return <div>ƒêang t·∫£i...</div>; // Hi·ªÉn th·ªã loading khi ch∆∞a c√≥ k·∫øt qu·∫£
  }

  return (
    <RecoilRoot>
      <App>
        <SnackbarProvider>
          <ZMPRouter>
            <AnimationRoutes>
              <Route path="/" element={<HomePage />} />
              <Route path="/about" element={<About />} />
              <Route path="/form" element={<Form />} />
              <Route path="/user" element={<User />} />
              <Route path="/wheel" element={isFollowingOA ? <Wheel /> : <QRCode />} />
            </AnimationRoutes>
          </ZMPRouter>
        </SnackbarProvider>
      </App>
    </RecoilRoot>
  );
};

export default MyApp;